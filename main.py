import os
import json
import requests
import telebot
from dotenv import load_dotenv
from telebot.types import Message
from googletrans import Translator

load_dotenv()

bot = telebot.TeleBot(os.environ['BOT_TOKEN'])


@bot.message_handler(commands=['start'])
def start(message: Message):
  """
  –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã `/start`: –Ω—É–∂–µ–Ω –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
  –ó–∞–≥–ª—É—à–∫–∞; –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –Ω–∏–∫–∞–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π.
  """

  pass


@bot.message_handler(commands=['weather'])
def weather(message: Message):
  """
  –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã `/weater {–≥–æ—Ä–æ–¥}`: —Å–æ–±–∏—Ä–∞–µ—Ç, —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç, –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ
  """

  # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤–≤–µ–¥–µ–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã
  splitted_message = message.text.split(' ')
  if len(splitted_message) <= 1:
    bot.reply_to(message, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã: `/weather {–≥–æ—Ä–æ–¥}`\n–ü—Ä–∏–º–µ—Ä: `/weather –ú–æ—Å–∫–≤–∞`')
    return None
  

  def translate_city_name(ru_city_name: str):
    """
    –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∑–∞–ø—Ä–æ—Å–∞—Ö
    """

    translator = Translator()
    en_city_name = translator.translate(
      ru_city_name.capitalize(), 
      dest='en', 
      src='ru'
    )
    return en_city_name.text
  
  city = translate_city_name(splitted_message[1])
  

  def get_weather(city) -> str:
    """
    –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –≤ –∑–∞–¥–∞–Ω–Ω–æ–º –≥–æ—Ä–æ–¥–µ
    """

    api_key = os.environ['WEATHER_API_KEY']
    api_url = os.environ['WEATHER_API_URL']

    weather_data = requests.get(api_url, params={
      'key': api_key,
      'q': city
    })


    def format_response(weather_data: dict) -> str:
      """
      –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      """


      def format_wind_direction(direction_label: str):
        """
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª–µ `wind_dir`
        """

        # –ù–∞–±–æ—Ä –≤—Å–µ—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π
        wind_directions = {
            'N': '—Å–µ–≤–µ—Ä–Ω—ã–π –≤–µ—Ç–µ—Ä',
            'NNE': '—Å–µ–≤–µ—Ä–æ-–≤–æ—Å—Ç–æ—á–Ω—ã–π –≤–µ—Ç–µ—Ä',
            'NE': '—Å–µ–≤–µ—Ä–æ-–≤–æ—Å—Ç–æ—á–Ω—ã–π –≤–µ—Ç–µ—Ä',
            'ENE': '–≤–æ—Å—Ç–æ—á–Ω–æ-—Å–µ–≤–µ—Ä–æ-–≤–æ—Å—Ç–æ—á–Ω—ã–π –≤–µ—Ç–µ—Ä',
            'E': '–≤–æ—Å—Ç–æ—á–Ω—ã–π –≤–µ—Ç–µ—Ä',
            'ESE': '–≤–µ—Ç–µ—Ä —Å –≤–æ—Å—Ç–æ–∫–∞ –Ω–∞ —é–≥–æ-–≤–æ—Å—Ç–æ–∫',
            'SE': '–≤–µ—Ç–µ—Ä —Å —é–≥–æ-–≤–æ—Å—Ç–æ–∫–∞',
            'SSE': '–≤–µ—Ç–µ—Ä —Å —é–≥–∞ –Ω–∞ —é–≥–æ-–≤–æ—Å—Ç–æ–∫',
            'S': '—é–∂–Ω—ã–π –≤–µ—Ç–µ—Ä',
            'SSW': '—é–≥–æ-–∑–∞–ø–∞–¥–Ω—ã–π –≤–µ—Ç–µ—Ä',
            'SW': '—é–≥–æ-–∑–∞–ø–∞–¥–Ω—ã–π –≤–µ—Ç–µ—Ä',
            'WSW': '–∑–∞–ø–∞–¥–Ω–æ-—é–≥–æ-–∑–∞–ø–∞–¥–Ω—ã–π –≤–µ—Ç–µ—Ä',
            'W': '–∑–∞–ø–∞–¥–Ω—ã–π –≤–µ—Ç–µ—Ä',
            'WNW': '–≤–µ—Ç–µ—Ä –∑–∞–ø–∞–¥–Ω—ã–π-—Å–µ–≤–µ—Ä–æ-–∑–∞–ø–∞–¥–Ω—ã–π',
            'NW': '–≤–µ—Ç–µ—Ä —Å–µ–≤–µ—Ä–æ-–∑–∞–ø–∞–¥–Ω—ã–π',
            'NNW': '–≤–µ—Ç–µ—Ä —Å–µ–≤–µ—Ä–æ-–∑–∞–ø–∞–¥–Ω—ã–π',
            'N360': '—Å–µ–≤–µ—Ä–Ω—ã–π –≤–µ—Ç–µ—Ä'
        }

        return wind_directions[direction_label]


      def format_last_update(last_update: str):
        """
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª–µ `last_update`
        """

        last_update_parts = last_update.split(' ')
        date_part = last_update_parts[0].split('-')
        date_str = f'{date_part[2]}.{date_part[1]}.{date_part[0]}'
        time_str = last_update_parts[1]
        return f'{date_str} {time_str}'
      

      def format_condition(condition_code: int):
        """
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª–µ `condition`
        """


        def find_condition_by_code(conditions_data: list, condition_code: int):
          """
          –ù–∞–π—Ç–∏ –ø–æ–≥–æ–¥–Ω–æ–µ —É—Å–ª–æ–≤–∏–µ –ø–æ –µ–≥–æ –∫–æ–¥—É
          """

          for condition_data in conditions_data:
            if condition_data['code'] == condition_code:
              return condition_data


        def find_ru_equivalent(condition_data: dict):
          """
          –ù–∞–π—Ç–∏ –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–≥–æ–¥–Ω–æ–≥–æ —É—Å–ª–æ–≤–∏—è
          """

          for condition_translation in condition_data['languages']:
            if condition_translation['lang_iso'] == 'ru':
              return condition_translation['day_text']

        # –ó–∞–ø—Ä–æ—Å –∫ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫—É –ø–æ–≥–æ–¥–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π
        conditions_data_request = requests.get('https://www.weatherapi.com/docs/conditions.json')
        conditions_data_request.encoding = 'utf-8-sig'
        conditions_data = json.loads(conditions_data_request.text)
        condition = find_condition_by_code(conditions_data, condition_code)
        formated_condition = find_ru_equivalent(condition)
        return formated_condition

      main_data = weather_data['current']
      temperature = main_data['temp_c']
      feels_like = main_data['feelslike_c']
      wind_speed = main_data['wind_kph']

      last_update = format_last_update(main_data['last_updated'])
      wind_direction = format_wind_direction(main_data['wind_dir'])
      condition = format_condition(main_data['condition']['code'])

      response_parts = [
        f'‚åõ –î–∞–Ω–Ω—ã–µ –æ—Ç [{last_update}]',
        f'üåÇ {condition}',
        f'üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ {temperature} ¬∞C (–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {feels_like} ¬∞C)',
        f'üå¨Ô∏è {wind_direction.capitalize()}, —Å–∫–æ—Ä–æ—Å—Ç—å {wind_speed} –∫–º/—á'
      ]

      return '\n'.join(response_parts)

    return format_response(json.loads(weather_data.text))
  
  bot.reply_to(message, get_weather(city))

bot.polling(none_stop=True, interval=0)
